/**
* JEvents Component for Joomla 1.5.x
*
* @version     $Id: jicaleventrepeat.php 1631 2009-11-26 05:38:33Z geraint $
* @package     JEvents
* @copyright   Copyright (C) 2008-2009 GWE Systems Ltd, 2006-2008 JEvents Project Group
* @license     GNU/GPLv2, see http://www.gnu.org/licenses/gpl-2.0.html
* @link        http://www.jevents.net
*/

var rsvpFieldTypes = new Hash();

var rsvpforms = {
	Version: '1.0.0',
	forms: {},
	initialized: false,
	language: 'english',
	debugging: false,
	sortablefieldlist : false,

	/**
	*  Routine to handle errors generated by rsvpforms.
	*
	*  A javascript error object contains two fields: type and message.
	*  Predefined Types:
	*  EvalError, RangeError, ReferenceError, SyntaxError, TypeError
	*  and URIError
	*/
	handleError: function(errorObj) {
		if (rsvpforms.debugging) alert('rsvpforms Error :: ' + errorObj.message);
		// trigger the error (as it might be handled by window.onerror)
		throw(errorObj);
	},
	handleWarning: function(warningObj) {
		try {
			if (rsvpforms.debugging) window.console.log('rsvpforms Warning :: ' + warningObj.message);
		} catch (errorObj) {}
	},

	setupOpenResponse: function(){
		$$('.rsvpfield').each(function(el,i){
			el.addEvent('click', function(){rsvpforms.highlightField(el.id);});
			var deleteButton = $('deleteFieldButton'+el.id);
			if (deleteButton) deleteButton.addEvent('click',function(){rsvpforms.deleteField(el.id)});
		});
		rsvpforms.setupSortableFields();
		rsvpforms.fieldsHaveReordered();		
	},
	
	createNewField: function(){

		var id = rsvpforms.uniqId('field');

		var fieldhtml = rsvpFieldTypes.get($("templatetype").value);
		var newDiv = new Element('div',{'class':'rsvpfield', 'id':id});
		fieldhtml = fieldhtml.replace(/###/g,id);
		newDiv.set('html',  fieldhtml) ;
		$('rsvpfields').appendChild(newDiv);
		newDiv.addEvent('mousedown',function(){rsvpforms.highlightField(id);})
		// update the label preview
		newDiv.getElement('.rsvpfl').addEvent('change',function(){$('pl'+id).innerHTML=this.value;});
		//newDiv.getElement('.rsvpfl').addEvent('blur',function(){$('pl'+id).innerHTML=this.value;});
		var deleteButton = $('deleteFieldButton').clone();
		deleteButton.id = 'deleteFieldButton'+id;
		deleteButton.style.display='block';
		deleteButton.addEvent('click',function(){rsvpforms.deleteField(newDiv.id)});
		deleteButton.inject(newDiv,"top");

		// make shure this field is highlighted and others not
		rsvpforms.highlightField(id);
		rsvpforms.setupSortableFields();
		rsvpforms.fieldsHaveReordered();

		// make sure fees are shown/hidden accordingly
		rsvppro.toggleFees();
		
		if (conditionalEditorPlugin) {
			conditionalEditorPlugin.update(id, '');
		}
		if (typeof jQuery !="undefined"){
			jQuery('select').chosen({
				disable_search_threshold : 10,
				allow_single_deselect : true
			});
			
			setupRSVPTemplateBootstrap();
		}

	},	
	deleteField: function(id){		
		$(id).removeEvents();
		try {
			// Mootools 1.2
			$(id).remove();
		}
		catch (e){
			// Mootools 1.3
			$(id).dispose();
		}
	},
	highlightField: function(id){
		el=  $(id);
		el.style.borderWidth="1px";
		var fieldinput = el.getElement(".rsvpfieldinput");
		if (fieldinput) fieldinput.style.display='block';
		$('deleteFieldButton'+id).style.display='block';
		var preview = $(id+"preview");
		if (preview) preview.addClass('previewright');
		rsvpforms.hideInactiveFields(id);		
	},
	hideInactiveFields: function(id){
		// must un-highlight all the other fields
		$$('.rsvpfield').each(function(el,i){
			if(el.id !=id) {
				el.style.borderWidth="0px";
				var fieldinput = el.getElement(".rsvpfieldinput");
				if (fieldinput) fieldinput.style.display='none';
				var deleteButton = $('deleteFieldButton'+el.id);
				if (deleteButton) $('deleteFieldButton'+el.id).style.display='none';
				var preview = $(el.id+"preview");
				if (preview) preview.removeClass('previewright');
			}
		});
	},	
	uniqId : function(prefix){
		var newDate = new Date();
		return prefix+newDate.getTime();
	},

	setupSortableFields : function(){
		// causes problems with sortable option interfering with entering data
		rsvpforms.sortablefieldlist = new Sortables($('rsvpfields'),{"onComplete":rsvpforms.fieldsHaveReordered,"ghost":false});

		// to avoid this ensure all the inputs within the sortable will respond to their input events - must stop the propogation to the Sortable
		$('rsvpfields').getElements('input,textarea,select').each(function(el,i){
			el.addEvent('mousedown',function (eventObj) {
				eventObj || (eventObj = new Event(window.event)); 
				eventObj.stopPropagation();
			});
		});

	},

	fieldsHaveReordered : function(){		
		var order = 0;
		$$('.rsvpfield').each(function(el,i){
			var ordering = $('ordering'+el.id);
			if (ordering) ordering.value=order;
			order ++;	
		});
	}

}

var rsvppro = {
	updateLabel: function(id){
		$('pl'+id).innerHTML = $('fl'+id).value;
	},
	toggleFees:function(){
		var hasfees = document.adminForm.elements['withfees'];
		for(var i = 0; i < hasfees.length; i++) {
			if (hasfees[i].checked){
				if (hasfees[i].value==1){
					if ($$(".rsvp_nofees"))	$$(".rsvp_nofees").each(function(el){
						el.removeClass("rsvp_nofees");
						el.addClass("rsvp_hasfees");
					});
					$$(".jevconfig").each(function(el){
						el.removeClass("jevconfighidden");
					});
					$('jevtemplate_fields').innerHTML=fulllist;
				}
				else {
					if ($$(".rsvp_hasfees"))	$$(".rsvp_hasfees").each(function(el){
						el.removeClass("rsvp_hasfees");
						el.addClass("rsvp_nofees");
					});
					$$(".jevconfig").each(function(el){
						el.addClass("jevconfighidden");
					});
					$('jevtemplate_fields').innerHTML=freelist;
				}
			}
		}
	},
	hasFees:function(el){
		rsvppro.toggleFees();
	},
	toggleTickets:function(){
		var hasticket = document.adminForm.elements['withticket'];
		for(var i = 0; i < hasticket.length; i++) {
			if (hasticket[i].checked){
				if (hasticket[i].value==1){
					$$(".jevticket").each(function(el){
						el.removeClass("jevtickethidden");
					});
				}
				else {
					$$(".jevticket").each(function(el){
						el.addClass("jevtickethidden");
					});
				}
			}
		}

		// setup the field inserts!
		ticketsEditorPlugin.update('ticketfields');
	},
	hasTicket:function(el){
		rsvppro.toggleTickets();
	}
}

var $FF = function(element) {
	element2 = $(element);
	return element2.get('value');
}

ticketsEditorPlugin = {

	update: function (pluginName) {

		var optgroup = document.getElement("#"+pluginName + " optgroup.templatefields");
		// clean out the kids first
		while (optgroup.firstChild) {
			optgroup.removeChild(optgroup.firstChild);
		}
		// now add the new kids
		$$("#rsvpfields .rsvpfl").each(function(el,i){
			var val = el.value.replace(":","")+':field:#'+ el.id.substring(2)+"#";
			ticketsEditorPlugin.node(optgroup, el.value+" [VALUE]", val);
			var val = el.value.replace(":","")+':label:#'+ el.id.substring(2)+"#";
			ticketsEditorPlugin.node(optgroup, el.value+" [LABEL]", val);
		});

	},
	node: function(parent, label, val){
		optnode = new Element('option',{value:val});
		parent.appendChild(optnode);
		optnode.text = label;
	},

	insert: function ( fieldName, pluginNode) {

		var textToInsert = '{' + $FF(pluginNode) + '}';

		// Bail if the selectedIndex is 0 (as this is the 'Select...' option)
		if ( $(pluginNode).selectedIndex == 0 ) return true;

		// insert the text using the library code
		$result = jInsertEditorText(textToInsert,fieldName);

		// reset the selected element back to 'Select...'
		$(pluginNode).selectedIndex = 0;
		return true;
	}
}

var activeMessageField = false;

messagesEditorPlugin = {

	update: function (pluginClass) {

		var optgroups = document.getElements ("select."+pluginClass+" optgroup.templatefields");
		optgroups.each(function(optgroup){			
			// clean out the kids first
			while (optgroup.firstChild) {
				optgroup.removeChild(optgroup.firstChild);
			}

			// now add the new kids
			$$("#rsvpfields .rsvpfl").each(function(el,i){
				var val = el.value.replace(":","")+':field:#'+ el.id.substring(2)+"#";
				messagesEditorPlugin.node(optgroup, el.value+" [VALUE]", val);
				var val = el.value.replace(":","")+':label:#'+ el.id.substring(2)+"#";
				messagesEditorPlugin.node(optgroup, el.value+" [LABEL]", val);
			});
		})
		

	},
	node: function(parent, label, val){
		optnode = new Element('option',{value:val});
		parent.appendChild(optnode);
		optnode.text = label;
	},

	insert: function ( pluginNode) {

		var textToInsert = '{' + $FF(pluginNode) + '}';

		// Bail if the selectedIndex is 0 (as this is the 'Select...' option)
		if ( $(pluginNode).selectedIndex == 0 ) return true;

		// insert the text into the field
		if ($(pluginNode.replace("fields",""))){
			$result = jInsertEditorText(textToInsert,pluginNode.replace("fields",""));
		}
		else {
			var node = pluginNode.replace("fields","]").replace("params","params[");
			$result = jInsertEditorText(textToInsert,node);
		}
		//this.insertAtCursor($(pluginNode.replace("fields","")), textToInsert);
		
		// reset the selected element back to 'Select...'
		$(pluginNode).selectedIndex = 0;
		return true;
	}
	/*
	, 
	insertAtCursor: function  (myField, myValue) {
		if (document.selection) {
			// IE support
			myField.focus();
			sel = document.selection.createRange();
			sel.text = myValue;
		} else if (myField.selectionStart || myField.selectionStart == '0') {
			// MOZILLA/NETSCAPE support
			var startPos = myField.selectionStart;
			var endPos = myField.selectionEnd;
			myField.value = myField.value.substring(0, startPos)
				+ myValue
				+ myField.value.substring(endPos, myField.value.length);
		} else {
			myField.value += myValue;
		}
	}
	*/
}

conditionalEditorPlugin = {

	update: function (fieldid, basefield) {		
		var selects = document.getElements (".cf");
		selects.each(function(sel){			
			if (sel.id.substring(2) == fieldid){
				// now add the new kids
				$$("#rsvpfields .rsvpfl").each(function(el,i){
					// only support boolean base fields for now

					if (el.getAttribute('rel')=="jevrboolean"){
						var val = el.id.substring(2);
						// don't do the field itself
						if (val==fieldid) return;
						conditionalEditorPlugin.node(sel, el.value, val, basefield);
					}
				});
			}
		})
		

	},
	node: function(parent, label, val, basefield){
		optnode = new Element('option',{value:val});
		parent.appendChild(optnode);
		optnode.text = label;
		if (val==basefield){
			optnode.selected=true;
		}
	}
}

window.addEvent("domready",function (){document.getElements("fieldset.jevmessages textarea").each(function (el) {
		el.addEvent('mousedown',function() {activeMessageField = el;}); 
})});

function setupForms(){
	if (!$("newFieldButton")) return;
	$("newFieldButton").addEvent("click", function(){rsvpforms.createNewField();});
	rsvpforms.hideInactiveFields(0);
	rsvpforms.setupOpenResponse();

	rsvppro.toggleFees();
	rsvppro.toggleTickets();
	
	messagesEditorPlugin.update('messagesEditorPlugin');
	
}

window.addEvent("domready",function (){setupForms();});

function rsvpToggleDetails(el) {
	//var reveal = togglereveals[el.parentNode.id];
	//var hide = togglehides[el.parentNode.id];
	var node =el.getParent().getElement('.largeDetail');
	var nodeContent =el.getParent().getElement('.largeDetailContent');
	var nodeHeight = nodeContent.getStyle('height').toInt()+6;
	if (!nodeHeight ){
		nodeHeight =100;
	}
	if (node.status!='show'){
		closeOtherRsvpToggles();
		//el.getElement('div').innerHTML = hide;
		el.getElement('span.spanopen').style.display='inline';
		el.getElement('span.spanclosed').style.display='none';
		var myeffect = new Fx.Morph(node ,{
			onComplete:function(){
				setRsvpToggleStatus(node);
				node.style.height="100%";
				node.style.overflow="visible"
			},
			duration: 500, 
			transition: Fx.Transitions.quadOut
			});
		myeffect.start( {'height': nodeHeight});
	}
	else {
		el.getElement('span.spanclosed').style.display='inline';
		el.getElement('span.spanopen').style.display='none';		
		var myeffect = new Fx.Morph(node ,{
			onComplete:function(){
				setRsvpToggleStatus(node);
				node.style.overflow="hidden"
			},
			duration: 500, 
			transition: Fx.Transitions.quadOut
			});
		myeffect.start( {'height': 0});
	}
	return false;
}
function closeOtherRsvpToggles(){
	document.getElements('.largeDetail').each(function(node){
		if (node.status=='show'){
			el = node.getParent().getElement('.toggleEnlarge');
			el.getElement('span.spanclosed').style.display='inline';
			el.getElement('span.spanopen').style.display='none';		
			var myeffect = new Fx.Morph(node ,{
				onComplete:function(){
					setRsvpToggleStatus(node);
					node.style.overflow="hidden"					
				},
				duration: 500, 
				transition: Fx.Transitions.quadOut
				});
			myeffect.start( {'height': 0});
		}
	});
}
function setRsvpToggleStatus (node) {
	if (node.status!='show'){
		node.status='show';
	}
	else {
		node.status='hide';
	}
}
function setupRsvpToggles() {
	$$('.toggleEnlarge').each(
		function (el, index) {
			el.addEvent('mousedown', function(evt){
				rsvpToggleDetails(this);
				return false;
			});
		}
	);
}
window.addEvent('domready',function(){setupRsvpToggles();});